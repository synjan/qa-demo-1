name: CI

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20.x'

jobs:
  # Quick checks that should fail fast
  quick-checks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Check formatting
      run: npx prettier --check "src/**/*.{js,jsx,ts,tsx,json,css,md}"
    
    - name: Type checking
      run: npx tsc --noEmit

  # Split tests into groups for parallel execution
  prepare-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
    outputs:
      matrix: ${{ steps.split.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Split tests
        id: split
        run: |
          echo '{"group":[1,2,3,4]}' > matrix.json
          echo "matrix=$(cat matrix.json)" >> $GITHUB_OUTPUT

  # Parallel unit tests
  unit-tests:
    needs: [quick-checks, prepare-tests]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: 
        group: [1, 2, 3, 4]
        node-version: ${{ github.event_name == 'push' && fromJson('["18.x", "20.x"]') || fromJson('["20.x"]') }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests (Group ${{ matrix.group }})
      run: |
        npm run test:parallel -- --shard=${{ matrix.group }}/4
      env:
        CI: true
        NODE_OPTIONS: --max-old-space-size=4096
    
    - name: Upload coverage
      uses: actions/upload-artifact@v4
      if: matrix.node-version == '20.x'
      with:
        name: coverage-${{ matrix.group }}
        path: coverage/
        retention-days: 1

  # E2E tests with sharding
  e2e-tests:
    needs: quick-checks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || !contains(github.event.pull_request.labels.*.name, 'skip-e2e')
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3, 4]
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright
      run: npx playwright install --with-deps chromium
    
    - name: Build application
      run: npm run build
      env:
        GITHUB_CLIENT_ID: ${{ secrets.GITHUB_CLIENT_ID }}
        GITHUB_CLIENT_SECRET: ${{ secrets.GITHUB_CLIENT_SECRET }}
        NEXTAUTH_URL: http://localhost:3000
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    
    - name: Run E2E tests (Shard ${{ matrix.shard }}/4)
      run: |
        SHARD=${{ matrix.shard }} TOTAL_SHARDS=4 npm run test:e2e:shard
      env:
        CI: true
        BASE_URL: http://localhost:3000
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-results-${{ matrix.shard }}
        path: playwright-report/
        retention-days: 7

  # Merge coverage and generate reports
  coverage-report:
    needs: unit-tests
    runs-on: ubuntu-latest
    if: always()
    steps:
    - uses: actions/checkout@v4
    
    - name: Download coverage artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: coverage-*
        path: coverage-parts/
    
    - name: Merge coverage reports
      run: |
        npm install -g nyc
        mkdir -p coverage
        nyc merge coverage-parts coverage/coverage-final.json
        nyc report --reporter=lcov --reporter=text-summary
    
    - name: Upload to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        flags: unittests
        fail_ci_if_error: false

  # Performance tests - only on main branch
  performance:
    needs: [unit-tests, e2e-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build and start application
      run: |
        npm run build
        npm run start &
        npx wait-on http://localhost:3000
      env:
        GITHUB_CLIENT_ID: ${{ secrets.GITHUB_CLIENT_ID }}
        GITHUB_CLIENT_SECRET: ${{ secrets.GITHUB_CLIENT_SECRET }}
        NEXTAUTH_URL: http://localhost:3000
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    
    - name: Run performance tests
      run: |
        npx playwright test e2e-tests/performance.spec.ts
    
    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'customSmallerIsBetter'
        output-file-path: performance-results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  # Security scan - runs in parallel but doesn't block
  security:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      run: npm audit --audit-level=high
    
    - name: Upload security report
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: npm-audit.log

  # Final build verification
  build:
    needs: [unit-tests, e2e-tests]
    runs-on: ubuntu-latest
    if: always() && !contains(needs.*.result, 'failure')
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
      env:
        GITHUB_CLIENT_ID: ${{ secrets.GITHUB_CLIENT_ID }}
        GITHUB_CLIENT_SECRET: ${{ secrets.GITHUB_CLIENT_SECRET }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          .next/
          public/
        retention-days: 1